# Source : https://github.com/ph4r05/py-chacha20poly1305

# Copyright (c) 2015, Hubert Kario
#
# See the LICENSE file for legal information regarding use of this file.
"""Implementation of Poly1305 authenticator for RFC 7539"""

from cryptomath import divceil

class Poly1305(object):

    """Poly1305 authenticator"""

    P = 0x3fffffffffffffffffffffffffffffffb # 2^130-5

    @staticmethod
    def le_bytes_to_num(data):
        """Convert a number from little endian byte format"""
        ret = 0
        for i in range(len(data) - 1, -1, -1):
            ret <<= 8
            ret += data[i]
        return ret

    @staticmethod
    def num_to_16_le_bytes(num):
        """Convert number to 16 bytes in little endian format"""
        ret = [0]*16
        for i, _ in enumerate(ret):
            ret[i] = num & 0xff
            num >>= 8
        return bytearray(ret)

    def __init__(self, key):
        """Set the authenticator key"""
        if len(key) != 32:
            raise ValueError("Key must be 256 bit long")
        self.acc = 0
        self.r = self.le_bytes_to_num(key[0:16])
        self.r &= 0x0ffffffc0ffffffc0ffffffc0fffffff
        self.s = self.le_bytes_to_num(key[16:32])

    def create_tag(self, data):
        """Calculate authentication tag for data"""
        for i in range(0, divceil(len(data), 16)):
            n = self.le_bytes_to_num(data[i*16:(i+1)*16] + b'\x01')
            self.acc += n
            self.acc = (self.r * self.acc) % self.P
        self.acc += self.s
        return self.num_to_16_le_bytes(self.acc)

# def TestPoly1305(hexmessage, hexkey, hextag):
#     message = bytearray.fromhex(hexmessage)
#     key = bytearray.fromhex(hexkey)
#     tag = bytearray.fromhex(hextag)

#     comp_tag = Poly1305(key).create_tag(message)

#     global countYay
#     global countMeh

#     if(tag == comp_tag):
#         countYay += 1
#     else:
#         countMeh += 1

# countYay = 0
# countMeh = 0

# # RFC 7539, section 2.5.2.
# TestPoly1305("43727970746f6772617068696320466f72756d2052657365617263682047726f7570",
#                  "85d6be7857556d337f4452fe42d506a80103808afb0db2fd4abff6af4149f51b",
#                  "a8061dc1305136c6c22b8baf0c0127a9");

# # RFC 7539, section A.3.
# TestPoly1305("00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
#                  "000000000000000000000000000",
#                  "0000000000000000000000000000000000000000000000000000000000000000",
#                  "00000000000000000000000000000000");

# TestPoly1305("416e79207375626d697373696f6e20746f20746865204945544620696e74656e6465642062792074686520436f6e747269627"
#                  "5746f7220666f72207075626c69636174696f6e20617320616c6c206f722070617274206f6620616e204945544620496e7465"
#                  "726e65742d4472616674206f722052464320616e6420616e792073746174656d656e74206d6164652077697468696e2074686"
#                  "520636f6e74657874206f6620616e204945544620616374697669747920697320636f6e7369646572656420616e2022494554"
#                  "4620436f6e747269627574696f6e222e20537563682073746174656d656e747320696e636c756465206f72616c20737461746"
#                  "56d656e747320696e20494554462073657373696f6e732c2061732077656c6c206173207772697474656e20616e6420656c65"
#                  "6374726f6e696320636f6d6d756e69636174696f6e73206d61646520617420616e792074696d65206f7220706c6163652c207"
#                  "768696368206172652061646472657373656420746f",
#                  "0000000000000000000000000000000036e5f6b5c5e06070f0efca96227a863e",
#                  "36e5f6b5c5e06070f0efca96227a863e");

# TestPoly1305("416e79207375626d697373696f6e20746f20746865204945544620696e74656e6465642062792074686520436f6e747269627"
#                  "5746f7220666f72207075626c69636174696f6e20617320616c6c206f722070617274206f6620616e204945544620496e7465"
#                  "726e65742d4472616674206f722052464320616e6420616e792073746174656d656e74206d6164652077697468696e2074686"
#                  "520636f6e74657874206f6620616e204945544620616374697669747920697320636f6e7369646572656420616e2022494554"
#                  "4620436f6e747269627574696f6e222e20537563682073746174656d656e747320696e636c756465206f72616c20737461746"
#                  "56d656e747320696e20494554462073657373696f6e732c2061732077656c6c206173207772697474656e20616e6420656c65"
#                  "6374726f6e696320636f6d6d756e69636174696f6e73206d61646520617420616e792074696d65206f7220706c6163652c207"
#                  "768696368206172652061646472657373656420746f",
#                  "36e5f6b5c5e06070f0efca96227a863e00000000000000000000000000000000",
#                  "f3477e7cd95417af89a6b8794c310cf0");

# TestPoly1305("2754776173206272696c6c69672c20616e642074686520736c6974687920746f7665730a446964206779726520616e6420676"
#                  "96d626c6520696e2074686520776162653a0a416c6c206d696d737920776572652074686520626f726f676f7665732c0a416e"
#                  "6420746865206d6f6d65207261746873206f757467726162652e",
#                  "1c9240a5eb55d38af333888604f6b5f0473917c1402b80099dca5cbc207075c0",
#                  "4541669a7eaaee61e708dc7cbcc5eb62");

# TestPoly1305("ffffffffffffffffffffffffffffffff",
#                  "0200000000000000000000000000000000000000000000000000000000000000",
#                  "03000000000000000000000000000000");

# TestPoly1305("02000000000000000000000000000000",
#                  "02000000000000000000000000000000ffffffffffffffffffffffffffffffff",
#                  "03000000000000000000000000000000");

# TestPoly1305("fffffffffffffffffffffffffffffffff0ffffffffffffffffffffffffffffff11000000000000000000000000000000",
#                  "0100000000000000000000000000000000000000000000000000000000000000",
#                  "05000000000000000000000000000000");

# TestPoly1305("fffffffffffffffffffffffffffffffffbfefefefefefefefefefefefefefefe01010101010101010101010101010101",
#                  "0100000000000000000000000000000000000000000000000000000000000000",
#                  "00000000000000000000000000000000");

# TestPoly1305("fdffffffffffffffffffffffffffffff",
#                  "0200000000000000000000000000000000000000000000000000000000000000",
#                  "faffffffffffffffffffffffffffffff");

# TestPoly1305("e33594d7505e43b900000000000000003394d7505e4379cd01000000000000000000000000000000000000000000000001000000000000000000000000000000",
#                  "0100000000000000040000000000000000000000000000000000000000000000",
#                  "14000000000000005500000000000000");

# TestPoly1305("e33594d7505e43b900000000000000003394d7505e4379cd010000000000000000000000000000000000000000000000",
#                  "0100000000000000040000000000000000000000000000000000000000000000",
#                  "13000000000000000000000000000000");

# print(countYay, "passed and", countMeh, "failed")